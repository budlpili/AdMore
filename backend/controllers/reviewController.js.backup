const Review = require('../models/Review');
const Product = require('../models/Product');
const Order = require('../models/Order');

// 모든 리뷰 조회
const getAllReviews = async (req, res) => {
  try {
    const reviews = await Review.find()
      .populate('productId', 'name category tags image background')
      .populate('userId', 'name email')
      .sort({ createdAt: -1 });
    
    res.json({ success: true, reviews });
  } catch (error) {
    console.error('리뷰 목록 조회 오류:', error);
    res.status(500).json({ success: false, message: '리뷰 목록 조회에 실패했습니다.' });
  }
};

// 상품별 리뷰 조회
const getProductReviews = async (req, res) => {
  try {
    const { productId } = req.params;
    const reviews = await Review.find({ 
      productId, 
      status: 'approved' 
    })
      .populate('userId', 'name')
      .sort({ createdAt: -1 });
    
    res.json({ success: true, reviews });
  } catch (error) {
    console.error('상품 리뷰 조회 오류:', error);
    res.status(500).json({ success: false, message: '상품 리뷰 조회에 실패했습니다.' });
  }
};

// 리뷰 생성
const createReview = async (req, res) => {
  try {
    const {
      productId,
      orderId,
      userId,
      rating,
      title,
      content,
      images,
      userEmail
    } = req.body;

    // 상품 정보 조회
    const product = await Product.findById(productId);
    if (!product) {
      return res.status(404).json({ success: false, message: '상품을 찾을 수 없습니다.' });
    }

    // 사용자 정보 조회 (userEmail로)
    let actualUserId = userId;
    if (userEmail && userEmail !== 'temp-user-id' && userEmail !== 'guest@example.com') {
      const User = require('../models/User');
      const user = await User.findOne({ email: userEmail });
      if (user) {
        actualUserId = user._id;
        console.log('사용자 찾음:', { email: userEmail, userId: user._id });
      } else {
        console.log('사용자를 찾을 수 없음:', userEmail);
        // 사용자를 찾을 수 없는 경우 임시 ID 사용
        actualUserId = 'temp-user-id';
      }
    } else {
      console.log('userEmail이 유효하지 않음:', userEmail);
      // userEmail이 유효하지 않은 경우 임시 ID 사용
      actualUserId = 'temp-user-id';
    }

    // 주문 정보 조회 (orderId가 유효한 경우에만)
    let orderInfo = {};
    if (orderId && orderId !== 'temp-order-id') {
      const order = await Order.findOne({ orderId });
      if (order) {
        orderInfo = {
          orderDate: order.date,
          quantity: order.quantity
        };
      }
    }

    // 제목이 없으면 자동 생성
    const reviewTitle = title || `리뷰 - ${product.name}`;

    const review = new Review({
      productId,
      orderId: orderId || 'temp-order-id',
      userId: actualUserId !== 'temp-user-id' ? actualUserId : undefined,
      userEmail: userEmail,
      rating,
      title: reviewTitle,
      content,
      images: images || [],
      productName: product.name,
      productCategory: product.category,
      productTags: product.tags,
      productImage: product.image,
      productBackground: product.background,
      orderDate: orderInfo.orderDate || new Date(),
      quantity: orderInfo.quantity || 1
    });

    const savedReview = await review.save();
    res.json({ success: true, review: savedReview, message: '리뷰가 작성되었습니다.' });
  } catch (error) {
    console.error('리뷰 생성 오류:', error);
    res.status(500).json({ success: false, message: '리뷰 작성에 실패했습니다.' });
  }
};

// 리뷰 수정
const updateReview = async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = req.body;
    updateData.updatedAt = new Date();

    const review = await Review.findByIdAndUpdate(id, updateData, { new: true });
    
    if (!review) {
      return res.status(404).json({ success: false, message: '리뷰를 찾을 수 없습니다.' });
    }

    res.json({ success: true, message: '리뷰가 수정되었습니다.' });
  } catch (error) {
    console.error('리뷰 수정 오류:', error);
    res.status(500).json({ success: false, message: '리뷰 수정에 실패했습니다.' });
  }
};

// 리뷰 삭제
const deleteReview = async (req, res) => {
  try {
    const { id } = req.params;
    const review = await Review.findByIdAndDelete(id);
    
    if (!review) {
      return res.status(404).json({ success: false, message: '리뷰를 찾을 수 없습니다.' });
    }

    res.json({ success: true, message: '리뷰가 삭제되었습니다.' });
  } catch (error) {
    console.error('리뷰 삭제 오류:', error);
    res.status(500).json({ success: false, message: '리뷰 삭제에 실패했습니다.' });
  }
};

// 리뷰 상태 변경
const updateReviewStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    const review = await Review.findByIdAndUpdate(id, { status }, { new: true });
    
    if (!review) {
      return res.status(404).json({ success: false, message: '리뷰를 찾을 수 없습니다.' });
    }

    res.json({ success: true, message: '리뷰 상태가 변경되었습니다.' });
  } catch (error) {
    console.error('리뷰 상태 변경 오류:', error);
    res.status(500).json({ success: false, message: '리뷰 상태 변경에 실패했습니다.' });
  }
};

module.exports = {
  getAllReviews,
  getProductReviews,
  createReview,
  updateReview,
  deleteReview,
  updateReviewStatus
};
